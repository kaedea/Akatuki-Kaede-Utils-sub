/*
 * Copyright (c) 2017. Kaede (kidhaibara@gmail.com) All Rights Reserved.
 */

// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: danmaku/danmakuitem.proto at 7:1
package me.kaede.feya.protobuff.danmaku;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class DanmakuItem extends Message<DanmakuItem, DanmakuItem.Builder> {
  public static final ProtoAdapter<DanmakuItem> ADAPTER = new ProtoAdapter_DanmakuItem();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_DMK_ATTR = "";

  public static final String DEFAULT_DMK_TEXT = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String dmk_attr;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String dmk_text;

  public DanmakuItem(String dmk_attr, String dmk_text) {
    this(dmk_attr, dmk_text, ByteString.EMPTY);
  }

  public DanmakuItem(String dmk_attr, String dmk_text, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.dmk_attr = dmk_attr;
    this.dmk_text = dmk_text;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.dmk_attr = dmk_attr;
    builder.dmk_text = dmk_text;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof DanmakuItem)) return false;
    DanmakuItem o = (DanmakuItem) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(dmk_attr, o.dmk_attr)
        && Internal.equals(dmk_text, o.dmk_text);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (dmk_attr != null ? dmk_attr.hashCode() : 0);
      result = result * 37 + (dmk_text != null ? dmk_text.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (dmk_attr != null) builder.append(", dmk_attr=").append(dmk_attr);
    if (dmk_text != null) builder.append(", dmk_text=").append(dmk_text);
    return builder.replace(0, 2, "DanmakuItem{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<DanmakuItem, Builder> {
    public String dmk_attr;

    public String dmk_text;

    public Builder() {
    }

    public Builder dmk_attr(String dmk_attr) {
      this.dmk_attr = dmk_attr;
      return this;
    }

    public Builder dmk_text(String dmk_text) {
      this.dmk_text = dmk_text;
      return this;
    }

    @Override
    public DanmakuItem build() {
      return new DanmakuItem(dmk_attr, dmk_text, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_DanmakuItem extends ProtoAdapter<DanmakuItem> {
    ProtoAdapter_DanmakuItem() {
      super(FieldEncoding.LENGTH_DELIMITED, DanmakuItem.class);
    }

    @Override
    public int encodedSize(DanmakuItem value) {
      return (value.dmk_attr != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.dmk_attr) : 0)
          + (value.dmk_text != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.dmk_text) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, DanmakuItem value) throws IOException {
      if (value.dmk_attr != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.dmk_attr);
      if (value.dmk_text != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.dmk_text);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public DanmakuItem decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.dmk_attr(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.dmk_text(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public DanmakuItem redact(DanmakuItem value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
