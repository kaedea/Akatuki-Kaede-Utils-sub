/*
 * Copyright (c) 2017. Kaede (kidhaibara@gmail.com) All Rights Reserved.
 */

// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: danmaku/danmakudoc.proto at 9:1
package me.kaede.feya.protobuff.danmaku;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class DanmakuDoc extends Message<DanmakuDoc, DanmakuDoc.Builder> {
  public static final ProtoAdapter<DanmakuDoc> ADAPTER = new ProtoAdapter_DanmakuDoc();

  private static final long serialVersionUID = 0L;

  @WireField(
      tag = 1,
      adapter = "me.kaede.feya.protobuff.danmaku.DanmakuItem#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<DanmakuItem> items;

  public DanmakuDoc(List<DanmakuItem> items) {
    this(items, ByteString.EMPTY);
  }

  public DanmakuDoc(List<DanmakuItem> items, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.items = Internal.immutableCopyOf("items", items);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.items = Internal.copyOf("items", items);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof DanmakuDoc)) return false;
    DanmakuDoc o = (DanmakuDoc) other;
    return unknownFields().equals(o.unknownFields())
        && items.equals(o.items);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + items.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (!items.isEmpty()) builder.append(", items=").append(items);
    return builder.replace(0, 2, "DanmakuDoc{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<DanmakuDoc, Builder> {
    public List<DanmakuItem> items;

    public Builder() {
      items = Internal.newMutableList();
    }

    public Builder items(List<DanmakuItem> items) {
      Internal.checkElementsNotNull(items);
      this.items = items;
      return this;
    }

    @Override
    public DanmakuDoc build() {
      return new DanmakuDoc(items, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_DanmakuDoc extends ProtoAdapter<DanmakuDoc> {
    ProtoAdapter_DanmakuDoc() {
      super(FieldEncoding.LENGTH_DELIMITED, DanmakuDoc.class);
    }

    @Override
    public int encodedSize(DanmakuDoc value) {
      return DanmakuItem.ADAPTER.asRepeated().encodedSizeWithTag(1, value.items)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, DanmakuDoc value) throws IOException {
      DanmakuItem.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.items);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public DanmakuDoc decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.items.add(DanmakuItem.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public DanmakuDoc redact(DanmakuDoc value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.items, DanmakuItem.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
